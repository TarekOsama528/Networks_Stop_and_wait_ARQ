//
// Generated file, do not edit! Created by opp_msgtool 6.1 from MyMessage.msg.
//

#ifndef __MYMESSAGE_M_H
#define __MYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MyMessage;
/**
 * Class generated from <tt>MyMessage.msg:2</tt> by opp_msgtool.
 * <pre>
 * packet MyMessage
 * {
 *     string M_Header;
 *     string M_Payload;
 *     string M_Trailer;
 *     int M_Type;
 *     float sending_time;
 *     int id;
 * }
 * </pre>
 */
class MyMessage : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string M_Header;
    omnetpp::opp_string M_Payload;
    omnetpp::opp_string M_Trailer;
    int M_Type = 0;
    float sending_time = 0;
    int id = 0;

  private:
    void copy(const MyMessage& other);

  protected:
    bool operator==(const MyMessage&) = delete;

  public:
    MyMessage(const char *name=nullptr, short kind=0);
    MyMessage(const MyMessage& other);
    virtual ~MyMessage();
    MyMessage& operator=(const MyMessage& other);
    virtual MyMessage *dup() const override {return new MyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getM_Header() const;
    virtual void setM_Header(const char * M_Header);

    virtual const char * getM_Payload() const;
    virtual void setM_Payload(const char * M_Payload);

    virtual const char * getM_Trailer() const;
    virtual void setM_Trailer(const char * M_Trailer);

    virtual int getM_Type() const;
    virtual void setM_Type(int M_Type);

    virtual float getSending_time() const;
    virtual void setSending_time(float sending_time);

    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MyMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<MyMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MYMESSAGE_M_H

